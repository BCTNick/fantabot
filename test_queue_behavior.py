"""
Test per verificare che i messaggi TTS vengano messi in coda
invece di essere tagliati quando si usa speak_immediate
"""

import sys
import os
sys.path.append(os.path.join(os.getcwd(), 'src'))

from src.utils.tts_manager import TTSManager
import time


def test_queue_behavior():
    """Test che i messaggi vengano accodati invece di tagliati"""
    print("üß™ Testing TTS Queue Behavior...")
    
    tts_manager = TTSManager()
    
    if tts_manager.available:
        print("‚úÖ TTS Manager initialized")
        
        # Step 1: Aggiungiamo alcuni messaggi normali
        print("\n1Ô∏è‚É£ Adding normal messages to queue...")
        tts_manager.speak_async("Primo messaggio normale", priority=5)
        tts_manager.speak_async("Secondo messaggio normale", priority=6)
        tts_manager.speak_async("Terzo messaggio normale", priority=7)
        
        # Verifichiamo la coda
        time.sleep(0.5)  # Piccola pausa per permettere l'accodamento
        status = tts_manager.get_status()
        print(f"   Queue size dopo messaggi normali: {status['queue_size']}")
        
        # Step 2: Aggiungiamo un messaggio immediato
        print("\n2Ô∏è‚É£ Adding immediate message (should NOT clear queue)...")
        tts_manager.speak_immediate("MESSAGGIO URGENTE!")
        
        # Verifichiamo che la coda non sia stata svuotata
        time.sleep(0.5)
        status = tts_manager.get_status()
        print(f"   Queue size dopo messaggio immediato: {status['queue_size']}")
        
        if status['queue_size'] > 0:
            print("   ‚úÖ SUCCESSO: I messaggi sono stati mantenuti in coda!")
        else:
            print("   ‚ùå ERRORE: I messaggi sono stati rimossi dalla coda!")
        
        # Step 3: Aggiungiamo altri messaggi per vedere l'ordine
        print("\n3Ô∏è‚É£ Adding more messages to test priority order...")
        tts_manager.speak_async("Messaggio bassa priorit√†", priority=8)
        tts_manager.speak_immediate("ALTRO MESSAGGIO URGENTE!")
        tts_manager.speak_async("Ultimo messaggio normale", priority=5)
        
        # Status finale
        status = tts_manager.get_status()
        print(f"   Queue size finale: {status['queue_size']}")
        
        # Step 4: Aspettiamo e monitoriamo l'esecuzione
        print("\n4Ô∏è‚É£ Monitoring queue execution...")
        start_time = time.time()
        message_count = 0
        
        while tts_manager.is_busy() and (time.time() - start_time) < 60:
            current_status = tts_manager.get_status()
            if current_status['speaking']:
                message_count += 1
                print(f"   üì¢ Message {message_count} being spoken... Queue remaining: {current_status['queue_size']}")
                
                # Aspettiamo che finisca questo messaggio
                while current_status['speaking'] and (time.time() - start_time) < 60:
                    time.sleep(0.5)
                    current_status = tts_manager.get_status()
            
            time.sleep(0.5)
        
        final_status = tts_manager.get_status()
        print(f"\n‚úÖ Final status: {final_status}")
        print(f"üìä Total messages processed: {message_count}")
        
        tts_manager.shutdown()
        print("‚úÖ Queue behavior test completed")
    else:
        print("‚ùå TTS not available for queue test")


def test_priority_order():
    """Test che i messaggi vengano eseguiti nell'ordine di priorit√† corretto"""
    print("\nüéØ Testing Priority Order...")
    
    tts_manager = TTSManager()
    
    if tts_manager.available:
        # Aggiungiamo messaggi con priorit√† diverse
        print("Adding messages with different priorities...")
        tts_manager.speak_async("Priorit√† 8 (bassa)", priority=8)
        tts_manager.speak_async("Priorit√† 5 (media)", priority=5)
        tts_manager.speak_async("Priorit√† 2 (alta)", priority=2)
        tts_manager.speak_immediate("Priorit√† 1 (immediata)")  # priority=1
        tts_manager.speak_async("Priorit√† 9 (molto bassa)", priority=9)
        
        print("Ordine atteso: Immediata(1) ‚Üí Alta(2) ‚Üí Media(5) ‚Üí Bassa(8) ‚Üí Molto bassa(9)")
        
        # Monitoriamo l'esecuzione
        time.sleep(1)
        message_num = 1
        while tts_manager.is_busy() and message_num <= 5:
            if tts_manager.get_status()['speaking']:
                print(f"   üîä Messaggio {message_num} in riproduzione...")
                
                # Aspetta che il messaggio finisca
                while tts_manager.get_status()['speaking']:
                    time.sleep(0.5)
                
                message_num += 1
            time.sleep(0.5)
        
        tts_manager.shutdown()
        print("‚úÖ Priority order test completed")
    else:
        print("‚ùå TTS not available for priority test")


def main():
    """Esegui tutti i test"""
    print("üî¨ TESTING TTS QUEUE MANAGEMENT")
    print("=" * 50)
    print("OBIETTIVO: Verificare che speak_immediate NON tagli i messaggi")
    print("ma li metta semplicemente in coda con priorit√† alta\n")
    
    try:
        test_queue_behavior()
        test_priority_order()
        
        print("\nüéâ ALL QUEUE TESTS COMPLETED!")
        print("\nüìã EXPECTED IMPROVEMENTS:")
        print("‚Ä¢ speak_immediate non cancella pi√π i messaggi in coda ‚úÖ")
        print("‚Ä¢ Tutti i messaggi vengono riprodotti in ordine di priorit√† ‚úÖ")
        print("‚Ä¢ Non ci sono pi√π interruzioni brusche del TTS ‚úÖ")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
